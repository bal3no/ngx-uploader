{"ast":null,"code":"import _defineProperty from \"/Volumes/Storagino SSD/Develop/WebApps/third/ngx-uploader/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { ElementRef, EventEmitter } from '@angular/core';\nimport { NgUploaderService } from './ngx-uploader.class';\nimport * as i0 from \"@angular/core\";\nlet NgFileSelectDirective = /*#__PURE__*/(() => {\n  class NgFileSelectDirective {\n    constructor(elementRef) {\n      _defineProperty(this, \"elementRef\", void 0);\n      _defineProperty(this, \"options\", void 0);\n      _defineProperty(this, \"uploadInput\", void 0);\n      _defineProperty(this, \"uploadOutput\", void 0);\n      _defineProperty(this, \"upload\", void 0);\n      _defineProperty(this, \"el\", void 0);\n      _defineProperty(this, \"_sub\", void 0);\n      _defineProperty(this, \"fileListener\", () => {\n        if (this.el.files) {\n          this.upload.handleFiles(this.el.files);\n        }\n      });\n      this.elementRef = elementRef;\n      this.uploadOutput = new EventEmitter();\n    }\n    ngOnInit() {\n      this._sub = [];\n      const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n      const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n      const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n      const maxFileSize = this.options && this.options.maxFileSize || Number.POSITIVE_INFINITY;\n      this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads, maxFileSize);\n      this.el = this.elementRef.nativeElement;\n      this.el.addEventListener('change', this.fileListener, false);\n      this._sub.push(this.upload.serviceEvents.subscribe(event => {\n        this.uploadOutput.emit(event);\n      }));\n      if (this.uploadInput instanceof EventEmitter) {\n        this._sub.push(this.upload.initInputEvents(this.uploadInput));\n      }\n    }\n    ngOnDestroy() {\n      if (this.el) {\n        this.el.removeEventListener('change', this.fileListener, false);\n        this._sub.forEach(sub => sub.unsubscribe());\n      }\n    }\n  }\n  _defineProperty(NgFileSelectDirective, \"\\u0275fac\", function NgFileSelectDirective_Factory(t) {\n    return new (t || NgFileSelectDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  });\n  _defineProperty(NgFileSelectDirective, \"\\u0275dir\", /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NgFileSelectDirective,\n    selectors: [[\"\", \"ngFileSelect\", \"\"]],\n    inputs: {\n      options: \"options\",\n      uploadInput: \"uploadInput\"\n    },\n    outputs: {\n      uploadOutput: \"uploadOutput\"\n    }\n  }));\n  return NgFileSelectDirective;\n})();\nexport { NgFileSelectDirective };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}