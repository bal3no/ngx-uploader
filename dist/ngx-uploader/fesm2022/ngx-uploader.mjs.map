{"version":3,"file":"ngx-uploader.mjs","sources":["../../../projects/ngx-uploader/src/lib/interfaces.ts","../../../projects/ngx-uploader/src/lib/ngx-uploader.class.ts","../../../projects/ngx-uploader/src/lib/ng-file-drop.directive.ts","../../../projects/ngx-uploader/src/lib/ng-file-select.directive.ts","../../../projects/ngx-uploader/src/lib/ngx-uploader.module.ts","../../../projects/ngx-uploader/src/public_api.ts","../../../projects/ngx-uploader/src/ngx-uploader.ts"],"sourcesContent":["import { Subscription } from 'rxjs';\n\nexport interface UploaderOptions {\n  concurrency: number;\n  allowedContentTypes?: string[];\n  maxUploads?: number;\n  maxFileSize?: number;\n}\n\nexport interface BlobFile extends Blob {\n  name: string;\n}\n\nexport enum UploadStatus {\n  Queue,\n  Uploading,\n  Done,\n  Cancelled\n}\n\nexport interface UploadProgress {\n  status: UploadStatus;\n  data?: {\n    percentage: number;\n    speed: number;\n    speedHuman: string;\n    startTime: number | null;\n    endTime: number | null;\n    eta: number | null;\n    etaHuman: string | null;\n  };\n}\n\nexport interface UploadFile {\n  id: string;\n  fileIndex: number;\n  lastModifiedDate: Date;\n  name: string;\n  size: number;\n  type: string;\n  form: FormData;\n  progress: UploadProgress;\n  response?: any;\n  responseStatus?: number;\n  sub?: Subscription | any;\n  nativeFile?: File;\n  responseHeaders?: { [key: string]: string };\n}\n\nexport interface UploadOutput {\n  type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\n      | 'dragOut' | 'drop' | 'removed' | 'removedAll' | 'rejected';\n  file?: UploadFile;\n  nativeFile?: File;\n}\n\nexport interface UploadInput {\n  type: 'uploadAll' | 'uploadFile' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll';\n  url?: string;\n  method?: string;\n  id?: string;\n  fieldName?: string;\n  fileIndex?: number;\n  file?: UploadFile;\n  data?: { [key: string]: string | Blob };\n  headers?: { [key: string]: string };\n  includeWebKitFormBoundary?: boolean; // If false, only the file is send trough xhr.send (WebKitFormBoundary is omit)\n  withCredentials?: boolean;\n}\n","import { EventEmitter } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { mergeMap, finalize } from 'rxjs/operators';\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile } from './interfaces';\n\nexport function humanizeBytes(bytes: number): string {\n  if (bytes === 0) {\n    return '0 Byte';\n  }\n\n  const k = 1024;\n  const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  const i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nexport class NgUploaderService {\n  queue: UploadFile[];\n  serviceEvents: EventEmitter<UploadOutput>;\n  uploadScheduler: Subject<{ file: UploadFile; event: UploadInput }>;\n  subs: { id: string; sub: Subscription }[];\n  contentTypes: string[];\n  maxUploads: number;\n  maxFileSize: number;\n\n  constructor(\n    concurrency: number = Number.POSITIVE_INFINITY,\n    contentTypes: string[] = ['*'],\n    maxUploads: number = Number.POSITIVE_INFINITY,\n    maxFileSize: number = Number.POSITIVE_INFINITY\n  ) {\n    this.queue = [];\n    this.serviceEvents = new EventEmitter<UploadOutput>();\n    this.uploadScheduler = new Subject();\n    this.subs = [];\n    this.contentTypes = contentTypes;\n    this.maxUploads = maxUploads;\n    this.maxFileSize = maxFileSize;\n\n    this.uploadScheduler\n      .pipe(mergeMap(upload => this.startUpload(upload), concurrency))\n      .subscribe(uploadOutput => this.serviceEvents.emit(uploadOutput));\n  }\n\n  handleFiles(incomingFiles: FileList): void {\n    const allowedIncomingFiles: File[] = [].reduce.call(\n      incomingFiles,\n      (acc: File[], checkFile: File, i: number) => {\n        const futureQueueLength = acc.length + this.queue.length + 1;\n        if (\n          this.isContentTypeAllowed(checkFile.type) &&\n          futureQueueLength <= this.maxUploads &&\n          this.isFileSizeAllowed(checkFile.size)\n        ) {\n          acc = acc.concat(checkFile);\n        } else {\n          const rejectedFile: UploadFile = this.makeUploadFile(checkFile, i);\n          this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\n        }\n\n        return acc;\n      },\n      []\n    );\n\n    this.queue.push(\n      ...[].map.call(allowedIncomingFiles, (file: File, i: number) => {\n        const uploadFile: UploadFile = this.makeUploadFile(file, i);\n        this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\n        return uploadFile;\n      })\n    );\n\n    this.serviceEvents.emit({ type: 'allAddedToQueue' });\n  }\n\n  initInputEvents(input: EventEmitter<UploadInput>): Subscription {\n    return input.subscribe((event: UploadInput) => {\n      switch (event.type) {\n        case 'uploadFile':\n          const uploadFileIndex = this.queue.findIndex(file => file === event.file);\n          if (uploadFileIndex !== -1 && event.file) {\n            this.uploadScheduler.next({ file: this.queue[uploadFileIndex], event: event });\n          }\n          break;\n        case 'uploadAll':\n          const files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\n          files.forEach(file => this.uploadScheduler.next({ file: file, event: event }));\n          break;\n        case 'cancel':\n          const id = event.id || null;\n          if (!id) {\n            return;\n          }\n          const subs = this.subs.filter(sub => sub.id === id);\n          subs.forEach(sub => {\n            if (sub.sub) {\n              sub.sub.unsubscribe();\n              const fileIndex = this.queue.findIndex(file => file.id === id);\n              if (fileIndex !== -1) {\n                this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n                this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\n              }\n            }\n          });\n          break;\n        case 'cancelAll':\n          this.subs.forEach(sub => {\n            if (sub.sub) {\n              sub.sub.unsubscribe();\n            }\n\n            const file = this.queue.find(uploadFile => uploadFile.id === sub.id);\n            if (file) {\n              file.progress.status = UploadStatus.Cancelled;\n              this.serviceEvents.emit({ type: 'cancelled', file: file });\n            }\n          });\n          break;\n        case 'remove':\n          if (!event.id) {\n            return;\n          }\n\n          const i = this.queue.findIndex(file => file.id === event.id);\n          if (i !== -1) {\n            const file = this.queue[i];\n            this.queue.splice(i, 1);\n            this.serviceEvents.emit({ type: 'removed', file: file });\n          }\n          break;\n        case 'removeAll':\n          if (this.queue.length) {\n            this.queue = [];\n            this.serviceEvents.emit({ type: 'removedAll' });\n          }\n          break;\n      }\n    });\n  }\n\n  startUpload(upload: { file: UploadFile; event: UploadInput }): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const sub = this.uploadFile(upload.file, upload.event)\n        .pipe(\n          finalize(() => {\n            if (!observer.closed) {\n              observer.complete();\n            }\n          })\n        )\n        .subscribe(\n          output => {\n            observer.next(output);\n          },\n          err => {\n            observer.error(err);\n            observer.complete();\n          },\n          () => {\n            observer.complete();\n          }\n        );\n\n      this.subs.push({ id: upload.file.id, sub: sub });\n    });\n  }\n\n  uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const url = event.url || '';\n      const method = event.method || 'POST';\n      const data = event.data || {};\n      const headers = event.headers || {};\n\n      const xhr = new XMLHttpRequest();\n      const time: number = new Date().getTime();\n      let progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\n      let speed = 0;\n      let eta: number | null = null;\n\n      xhr.upload.addEventListener(\n        'progress',\n        (e: ProgressEvent) => {\n          if (e.lengthComputable) {\n            const percentage = Math.round((e.loaded * 100) / e.total);\n            const diff = new Date().getTime() - time;\n            speed = Math.round((e.loaded / diff) * 1000);\n            progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n            eta = Math.ceil((e.total - e.loaded) / speed);\n\n            file.progress = {\n              status: UploadStatus.Uploading,\n              data: {\n                percentage: percentage,\n                speed: speed,\n                speedHuman: `${humanizeBytes(speed)}/s`,\n                startTime: progressStartTime,\n                endTime: null,\n                eta: eta,\n                etaHuman: this.secondsToHuman(eta)\n              }\n            };\n\n            observer.next({ type: 'uploading', file: file });\n          }\n        },\n        false\n      );\n\n      xhr.upload.addEventListener('error', (e: Event) => {\n        observer.error(e);\n        observer.complete();\n      });\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          const speedAverage = Math.round((file.size / (new Date().getTime() - progressStartTime)) * 1000);\n          file.progress = {\n            status: UploadStatus.Done,\n            data: {\n              percentage: 100,\n              speed: speedAverage,\n              speedHuman: `${humanizeBytes(speedAverage)}/s`,\n              startTime: progressStartTime,\n              endTime: new Date().getTime(),\n              eta: eta,\n              etaHuman: this.secondsToHuman(eta || 0)\n            }\n          };\n\n          file.responseStatus = xhr.status;\n\n          try {\n            file.response = JSON.parse(xhr.response);\n          } catch (e) {\n            file.response = xhr.response;\n          }\n\n          file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n\n          observer.next({ type: 'done', file: file });\n\n          observer.complete();\n        }\n      };\n\n      xhr.open(method, url, true);\n      xhr.withCredentials = event.withCredentials;\n\n      try {\n        const uploadFile = <BlobFile>file.nativeFile;\n        const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\n\n        if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n          observer.complete();\n        }\n\n        Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n\n        let bodyToSend: FormData | BlobFile;\n\n        if (event.includeWebKitFormBoundary !== false) {\n          Object.keys(data).forEach(key => file.form.append(key, data[key]));\n          file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\n          bodyToSend = file.form;\n        } else {\n          bodyToSend = uploadFile;\n        }\n\n        this.serviceEvents.emit({ type: 'start', file: file });\n        xhr.send(bodyToSend);\n      } catch (e) {\n        observer.complete();\n      }\n\n      return () => {\n        xhr.abort();\n      };\n    });\n  }\n\n  secondsToHuman(sec: number): string {\n    return new Date(sec * 1000).toISOString().substr(11, 8);\n  }\n\n  generateId(): string {\n    return Math.random().toString(36).substring(7);\n  }\n\n  setContentTypes(contentTypes: string[]): void {\n    if (typeof contentTypes !== 'undefined' && contentTypes instanceof Array) {\n      if (contentTypes.find((type: string) => type === '*') !== undefined) {\n        this.contentTypes = ['*'];\n      } else {\n        this.contentTypes = contentTypes;\n      }\n      return;\n    }\n    this.contentTypes = ['*'];\n  }\n\n  allContentTypesAllowed(): boolean {\n    return this.contentTypes.find((type: string) => type === '*') !== undefined;\n  }\n\n  isContentTypeAllowed(mimetype: string): boolean {\n    if (this.allContentTypesAllowed()) {\n      return true;\n    }\n    return this.contentTypes.find((type: string) => type === mimetype) !== undefined;\n  }\n\n  isFileSizeAllowed(fileSize: number): boolean {\n    if (!this.maxFileSize) {\n      return true;\n    }\n    return fileSize <= this.maxFileSize;\n  }\n\n  makeUploadFile(file: File, index: number): UploadFile {\n    return {\n      fileIndex: index,\n      id: this.generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      form: new FormData(),\n      progress: {\n        status: UploadStatus.Queue,\n        data: {\n          percentage: 0,\n          speed: 0,\n          speedHuman: `${humanizeBytes(0)}/s`,\n          startTime: null,\n          endTime: null,\n          eta: null,\n          etaHuman: null\n        }\n      },\n      lastModifiedDate: new Date(file.lastModified),\n      sub: undefined,\n      nativeFile: file\n    };\n  }\n\n  private parseResponseHeaders(httpHeaders: string): { [key: string]: string } {\n    if (!httpHeaders) {\n      return;\n    }\n\n    return httpHeaders\n      .split('\\n')\n      .map((x: string) => x.split(/: */, 2))\n      .filter((x: string[]) => x[0])\n      .reduce((acc: { [key: string]: string }, x: string[]) => {\n        acc[x[0]] = x[1];\n        return acc;\n      }, {});\n  }\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { UploadOutput, UploadInput, UploaderOptions } from './interfaces';\nimport { NgUploaderService } from './ngx-uploader.class';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[ngFileDrop]',\n  standalone: false\n})\nexport class NgFileDropDirective implements OnInit, OnDestroy {\n  @Input() options: UploaderOptions;\n  @Input() uploadInput: EventEmitter<UploadInput>;\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n\n  constructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n\n  ngOnInit() {\n    this._sub = [];\n    const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n    const maxFileSize = this.options && this.options.maxFileSize || Number.POSITIVE_INFINITY;\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads, maxFileSize);\n\n    this.el = this.elementRef.nativeElement;\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n\n    this.el.addEventListener('drop', this.stopEvent, false);\n    this.el.addEventListener('dragenter', this.stopEvent, false);\n    this.el.addEventListener('dragover', this.stopEvent, false);\n  }\n\n  ngOnDestroy() {\n      if (this._sub) {\n        this._sub.forEach(sub => sub.unsubscribe());\n      }\n  }\n\n  stopEvent = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  @HostListener('drop', ['$event'])\n  public onDrop(e: any) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const event: UploadOutput = { type: 'drop' };\n    this.uploadOutput.emit(event);\n    this.upload.handleFiles(e.dataTransfer.files);\n  }\n\n  @HostListener('dragover', ['$event'])\n  public onDragOver(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const event: UploadOutput = { type: 'dragOver' };\n    this.uploadOutput.emit(event);\n  }\n\n  @HostListener('dragleave', ['$event'])\n  public onDragLeave(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const event: UploadOutput = { type: 'dragOut' };\n    this.uploadOutput.emit(event);\n  }\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\nimport { UploadOutput, UploaderOptions } from './interfaces';\nimport { NgUploaderService } from './ngx-uploader.class';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[ngFileSelect]',\n  standalone: false\n})\nexport class NgFileSelectDirective implements OnInit, OnDestroy {\n  @Input() options: UploaderOptions;\n  @Input() uploadInput: EventEmitter<any>;\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n\n  constructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n\n  ngOnInit() {\n    this._sub = [];\n    const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n    const maxFileSize = this.options && this.options.maxFileSize || Number.POSITIVE_INFINITY;\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads, maxFileSize);\n\n    this.el = this.elementRef.nativeElement;\n    this.el.addEventListener('change', this.fileListener, false);\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.el){\n      this.el.removeEventListener('change', this.fileListener, false);\n      this._sub.forEach(sub => sub.unsubscribe());\n    }\n  }\n\n  fileListener = () => {\n    if (this.el.files) {\n      this.upload.handleFiles(this.el.files);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgFileDropDirective } from './ng-file-drop.directive';\nimport { NgFileSelectDirective } from './ng-file-select.directive';\n\n@NgModule({\n  declarations: [NgFileDropDirective, NgFileSelectDirective],\n  exports: [NgFileDropDirective, NgFileSelectDirective]\n})\nexport class NgxUploaderModule { }\n","/*\n * Public API Surface of ngx-uploader\n */\n\nexport * from './lib/interfaces';\nexport * from './lib/ng-file-drop.directive';\nexport * from './lib/ng-file-select.directive';\nexport * from './lib/ngx-uploader.class';\nexport * from './lib/ngx-uploader.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}